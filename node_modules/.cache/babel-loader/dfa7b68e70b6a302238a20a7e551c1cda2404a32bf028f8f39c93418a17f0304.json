{"ast":null,"code":"var _jsxFileName = \"/Users/jamesmacquillan/Downloads/chatbot-im-1o copy/src/context/chatContext.js\",\n  _s = $RefreshSig$();\nimport { createContext } from 'react';\nimport useMessageCollection from '../hooks/useMessageCollection';\n\n/**\n * ChatContext is a context object that is used to share collection of messages\n * between components\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext({});\n\n/**\n * ChatContextProvider is a functional component that serves as a provider for the ChatContext.\n * It provides the ChatContext to the components within its subtree.\n *\n * @param {Object} props - The properties passed to the component.\n * @returns {JSX.Element} A ChatContext.Provider element.\n */\nconst ChatContextProvider = props => {\n  _s();\n  const [messages, setMessages, clearMessages] = useMessageCollection([]);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: [messages, setMessages, clearMessages],\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContextProvider, \"YFnO6mgl9VSRyd6r0E6e0p97qxk=\", false, function () {\n  return [useMessageCollection];\n});\n_c = ChatContextProvider;\nexport { ChatContext, ChatContextProvider };\nvar _c;\n$RefreshReg$(_c, \"ChatContextProvider\");","map":{"version":3,"names":["createContext","useMessageCollection","jsxDEV","_jsxDEV","ChatContext","ChatContextProvider","props","_s","messages","setMessages","clearMessages","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jamesmacquillan/Downloads/chatbot-im-1o copy/src/context/chatContext.js"],"sourcesContent":["import { createContext } from 'react';\nimport useMessageCollection from '../hooks/useMessageCollection';\n\n/**\n * ChatContext is a context object that is used to share collection of messages\n * between components\n */\nconst ChatContext = createContext({});\n\n/**\n * ChatContextProvider is a functional component that serves as a provider for the ChatContext.\n * It provides the ChatContext to the components within its subtree.\n *\n * @param {Object} props - The properties passed to the component.\n * @returns {JSX.Element} A ChatContext.Provider element.\n */\nconst ChatContextProvider = (props) => {\n  const [messages, setMessages, clearMessages] = useMessageCollection([]);\n\n  return (\n    <ChatContext.Provider value={[messages, setMessages, clearMessages]}>\n      {props.children}\n    </ChatContext.Provider>\n  );\n};\n\nexport { ChatContext, ChatContextProvider };\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,OAAO;AACrC,OAAOC,oBAAoB,MAAM,+BAA+B;;AAEhE;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,CAAC,CAAC,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,EAAEC,aAAa,CAAC,GAAGT,oBAAoB,CAAC,EAAE,CAAC;EAEvE,oBACEE,OAAA,CAACC,WAAW,CAACO,QAAQ;IAACC,KAAK,EAAE,CAACJ,QAAQ,EAAEC,WAAW,EAAEC,aAAa,CAAE;IAAAG,QAAA,EACjEP,KAAK,CAACO;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B,CAAC;AAACV,EAAA,CARIF,mBAAmB;EAAA,QACwBJ,oBAAoB;AAAA;AAAAiB,EAAA,GAD/Db,mBAAmB;AAUzB,SAASD,WAAW,EAAEC,mBAAmB;AAAG,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}