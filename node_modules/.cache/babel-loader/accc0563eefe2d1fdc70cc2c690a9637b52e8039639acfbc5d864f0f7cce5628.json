{"ast":null,"code":"var _toConsumableArray = require(\"/Users/jamesmacquillan/Documents/chatbot-im-1o/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _classCallCheck = require(\"/Users/jamesmacquillan/Documents/chatbot-im-1o/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/jamesmacquillan/Documents/chatbot-im-1o/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar localList = require('./lang.json').words;\nvar baseList = require('badwords-list').array;\nvar Filter = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Filter constructor.\n   * @constructor\n   * @param {object} options - Filter instance options\n   * @param {boolean} options.emptyList - Instantiate filter with no blacklist\n   * @param {array} options.list - Instantiate filter with custom list\n   * @param {string} options.placeHolder - Character used to replace profane words.\n   * @param {string} options.regex - Regular expression used to sanitize words before comparing them to blacklist.\n   * @param {string} options.replaceRegex - Regular expression used to replace profane words with placeHolder.\n   * @param {string} options.splitRegex - Regular expression used to split a string into words.\n   */\n  function Filter() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Filter);\n    Object.assign(this, {\n      list: options.emptyList && [] || Array.prototype.concat.apply(localList, [baseList, options.list || []]),\n      exclude: options.exclude || [],\n      splitRegex: options.splitRegex || /\\b/,\n      placeHolder: options.placeHolder || '*',\n      regex: options.regex || /[^a-zA-Z0-9|\\$|\\@]|\\^/g,\n      replaceRegex: options.replaceRegex || /\\w/g\n    });\n  }\n\n  /**\n   * Determine if a string contains profane language.\n   * @param {string} string - String to evaluate for profanity.\n   */\n  _createClass(Filter, [{\n    key: \"isProfane\",\n    value: function isProfane(string) {\n      var _this = this;\n      return this.list.filter(function (word) {\n        var wordExp = new RegExp(\"\\\\b\".concat(word.replace(/(\\W)/g, '\\\\$1'), \"\\\\b\"), 'gi');\n        return !_this.exclude.includes(word.toLowerCase()) && wordExp.test(string);\n      }).length > 0 || false;\n    }\n\n    /**\n     * Replace a word with placeHolder characters;\n     * @param {string} string - String to replace.\n     */\n  }, {\n    key: \"replaceWord\",\n    value: function replaceWord(string) {\n      return string.replace(this.regex, '').replace(this.replaceRegex, this.placeHolder);\n    }\n\n    /**\n     * Evaluate a string for profanity and return an edited version.\n     * @param {string} string - Sentence to filter.\n     */\n  }, {\n    key: \"clean\",\n    value: function clean(string) {\n      var _this2 = this;\n      return string.split(this.splitRegex).map(function (word) {\n        return _this2.isProfane(word) ? _this2.replaceWord(word) : word;\n      }).join(this.splitRegex.exec(string)[0]);\n    }\n\n    /**\n     * Add word(s) to blacklist filter / remove words from whitelist filter\n     * @param {...string} word - Word(s) to add to blacklist\n     */\n  }, {\n    key: \"addWords\",\n    value: function addWords() {\n      var _this$list,\n        _this3 = this;\n      var words = Array.from(arguments);\n      (_this$list = this.list).push.apply(_this$list, words);\n      words.map(function (word) {\n        return word.toLowerCase();\n      }).forEach(function (word) {\n        if (_this3.exclude.includes(word)) {\n          _this3.exclude.splice(_this3.exclude.indexOf(word), 1);\n        }\n      });\n    }\n\n    /**\n     * Add words to whitelist filter\n     * @param {...string} word - Word(s) to add to whitelist.\n     */\n  }, {\n    key: \"removeWords\",\n    value: function removeWords() {\n      var _this$exclude;\n      (_this$exclude = this.exclude).push.apply(_this$exclude, _toConsumableArray(Array.from(arguments).map(function (word) {\n        return word.toLowerCase();\n      })));\n    }\n  }]);\n  return Filter;\n}();\nmodule.exports = Filter;","map":{"version":3,"names":["localList","require","words","baseList","array","Filter","options","arguments","length","undefined","_classCallCheck","Object","assign","list","emptyList","Array","prototype","concat","apply","exclude","splitRegex","placeHolder","regex","replaceRegex","_createClass","key","value","isProfane","string","_this","filter","word","wordExp","RegExp","replace","includes","toLowerCase","test","replaceWord","clean","_this2","split","map","join","exec","addWords","_this$list","_this3","from","push","forEach","splice","indexOf","removeWords","_this$exclude","_toConsumableArray","module","exports"],"sources":["/Users/jamesmacquillan/Documents/chatbot-im-1o/node_modules/bad-words/lib/badwords.js"],"sourcesContent":["const localList = require('./lang.json').words;\nconst baseList = require('badwords-list').array;\n\nclass Filter {\n\n  /**\n   * Filter constructor.\n   * @constructor\n   * @param {object} options - Filter instance options\n   * @param {boolean} options.emptyList - Instantiate filter with no blacklist\n   * @param {array} options.list - Instantiate filter with custom list\n   * @param {string} options.placeHolder - Character used to replace profane words.\n   * @param {string} options.regex - Regular expression used to sanitize words before comparing them to blacklist.\n   * @param {string} options.replaceRegex - Regular expression used to replace profane words with placeHolder.\n   * @param {string} options.splitRegex - Regular expression used to split a string into words.\n   */\n  constructor(options = {}) {\n    Object.assign(this, {\n      list: options.emptyList && [] || Array.prototype.concat.apply(localList, [baseList, options.list || []]),\n      exclude: options.exclude || [],\n      splitRegex: options.splitRegex || /\\b/,\n      placeHolder: options.placeHolder || '*',\n      regex: options.regex || /[^a-zA-Z0-9|\\$|\\@]|\\^/g,\n      replaceRegex: options.replaceRegex || /\\w/g\n    })\n  }\n\n  /**\n   * Determine if a string contains profane language.\n   * @param {string} string - String to evaluate for profanity.\n   */\n  isProfane(string) {\n    return this.list\n      .filter((word) => {\n        const wordExp = new RegExp(`\\\\b${word.replace(/(\\W)/g, '\\\\$1')}\\\\b`, 'gi');\n        return !this.exclude.includes(word.toLowerCase()) && wordExp.test(string);\n      })\n      .length > 0 || false;\n  }\n\n  /**\n   * Replace a word with placeHolder characters;\n   * @param {string} string - String to replace.\n   */\n  replaceWord(string) {\n    return string\n      .replace(this.regex, '')\n      .replace(this.replaceRegex, this.placeHolder);\n  }\n\n  /**\n   * Evaluate a string for profanity and return an edited version.\n   * @param {string} string - Sentence to filter.\n   */\n  clean(string) {\n    return string.split(this.splitRegex).map((word) => {\n      return this.isProfane(word) ? this.replaceWord(word) : word;\n    }).join(this.splitRegex.exec(string)[0]);\n  }\n\n  /**\n   * Add word(s) to blacklist filter / remove words from whitelist filter\n   * @param {...string} word - Word(s) to add to blacklist\n   */\n  addWords() {\n    let words = Array.from(arguments);\n\n    this.list.push(...words);\n\n    words\n      .map(word => word.toLowerCase())\n      .forEach((word) => {\n        if (this.exclude.includes(word)) {\n          this.exclude.splice(this.exclude.indexOf(word), 1);\n        }\n      });\n  }\n\n  /**\n   * Add words to whitelist filter\n   * @param {...string} word - Word(s) to add to whitelist.\n   */\n  removeWords() {\n    this.exclude.push(...Array.from(arguments).map(word => word.toLowerCase()));\n  }\n}\n\nmodule.exports = Filter;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}