{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/**\n * @callback BackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   * `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   * `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   * `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent them from\n *   *clobbering*.\n *\n *   The default is `'user-content-'`.\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {string} [label='Footnotes']\n *   Textual label to use for the footnotes section.\n *\n *   The default value is `'Footnotes'`.\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {string} [labelAttributes='class=\"sr-only\"']\n *   Attributes to use on the footnote label.\n *\n *   Change it to show the label and add other attributes.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different attributes.\n *\n *   > üëâ **Note**: `id=\"footnote-label\"` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string} [labelTagName='h2']\n *   HTML tag name to use for the footnote label element.\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {BackLabelTemplate | string} [backLabel]\n *   Textual label to describe the backreference back to references.\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *  }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `aria-label` attribute on each backreference\n *   (the `‚Ü©` links).\n *   It affects users of assistive technology.\n */\n\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nvar own = {}.hasOwnProperty;\n\n/** @type {Options} */\nvar emptyOptions = {};\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return 'Back to reference ' + (referenceIndex + 1) + (rereferenceIndex > 1 ? '-' + rereferenceIndex : '');\n}\n\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\nexport function gfmFootnoteHtml(options) {\n  var config = options || emptyOptions;\n  var label = config.label || 'Footnotes';\n  var labelTagName = config.labelTagName || 'h2';\n  var labelAttributes = config.labelAttributes === null || config.labelAttributes === undefined ? 'class=\"sr-only\"' : config.labelAttributes;\n  var backLabel = config.backLabel || defaultBackLabel;\n  var clobberPrefix = config.clobberPrefix === null || config.clobberPrefix === undefined ? 'user-content-' : config.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition: function gfmFootnoteDefinition() {\n        var stack = /** @type {Array<boolean>} */this.getData('tightStack');\n        stack.push(false);\n      },\n      gfmFootnoteDefinitionLabelString: function gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n      gfmFootnoteCallString: function gfmFootnoteCallString() {\n        this.buffer();\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition: function gfmFootnoteDefinition() {\n        var definitions = /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions');\n        var footnoteStack = /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n        var tightStack = /** @type {Array<boolean>} */\n        this.getData('tightStack');\n        var current = footnoteStack.pop();\n        var value = this.resume();\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true);\n        // ‚ÄúHack‚Äù to prevent a line ending from showing up if we‚Äôre in a definition in\n        // an empty list item.\n        this.setData('lastWasTag');\n      },\n      gfmFootnoteDefinitionLabelString: function gfmFootnoteDefinitionLabelString(token) {\n        var footnoteStack = /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n        this.buffer(); // Get ready for a value.\n      },\n      gfmFootnoteCallString: function gfmFootnoteCallString(token) {\n        var calls = /** @type {Array<string>|undefined} */\n        this.getData('gfmFootnoteCallOrder');\n        var counts = /** @type {Record<string, number>|undefined} */\n        this.getData('gfmFootnoteCallCounts');\n        var id = normalizeIdentifier(this.sliceSerialize(token));\n        /** @type {number} */\n        var counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        var index = calls.indexOf(id);\n        var safeId = sanitizeUri(id.toLowerCase());\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n        var reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n      null: function _null() {\n        var _this = this;\n        var calls = /** @type {Array<string>} */\n        this.getData('gfmFootnoteCallOrder') || [];\n        var counts = /** @type {Record<string, number>} */\n        this.getData('gfmFootnoteCallCounts') || {};\n        var definitions = /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions') || {};\n        var index = -1;\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><' + labelTagName + ' id=\"footnote-label\"' + (labelAttributes ? ' ' + labelAttributes : '') + '>');\n          this.raw(this.encode(label));\n          this.tag('</' + labelTagName + '>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n        var _loop = function _loop() {\n          // Called definitions are always defined.\n          var id = calls[index];\n          var safeId = sanitizeUri(id.toLowerCase());\n          var referenceIndex = 0;\n          /** @type {Array<string>} */\n          var references = [];\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" aria-label=\"' + _this.encode(typeof backLabel === 'string' ? backLabel : backLabel(index, referenceIndex)) + '\" class=\"data-footnote-backref\">‚Ü©' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n          var reference = references.join(' ');\n          var injected = false;\n          _this.lineEndingIfNeeded();\n          _this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n          _this.lineEndingIfNeeded();\n          _this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, function ( /** @type {string} */$0) {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n          if (!injected) {\n            _this.lineEndingIfNeeded();\n            _this.tag(reference);\n          }\n          _this.lineEndingIfNeeded();\n          _this.tag('</li>');\n        };\n        while (++index < calls.length) {\n          _loop();\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["normalizeIdentifier","sanitizeUri","own","hasOwnProperty","emptyOptions","defaultBackLabel","referenceIndex","rereferenceIndex","gfmFootnoteHtml","options","config","label","labelTagName","labelAttributes","undefined","backLabel","clobberPrefix","enter","gfmFootnoteDefinition","stack","getData","push","gfmFootnoteDefinitionLabelString","buffer","gfmFootnoteCallString","exit","definitions","footnoteStack","tightStack","current","pop","value","resume","setData","call","token","sliceSerialize","calls","counts","id","counter","index","indexOf","safeId","toLowerCase","length","reuseCounter","tag","String","null","_null","_this","lineEndingIfNeeded","raw","encode","_loop","references","reference","join","injected","replace","$0"],"sources":["/Users/jamesmacquillan/Documents/chatbot-im-1o/node_modules/micromark-extension-gfm-footnote/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/**\n * @callback BackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   * `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   * `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   * `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent them from\n *   *clobbering*.\n *\n *   The default is `'user-content-'`.\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {string} [label='Footnotes']\n *   Textual label to use for the footnotes section.\n *\n *   The default value is `'Footnotes'`.\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {string} [labelAttributes='class=\"sr-only\"']\n *   Attributes to use on the footnote label.\n *\n *   Change it to show the label and add other attributes.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different attributes.\n *\n *   > üëâ **Note**: `id=\"footnote-label\"` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string} [labelTagName='h2']\n *   HTML tag name to use for the footnote label element.\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {BackLabelTemplate | string} [backLabel]\n *   Textual label to describe the backreference back to references.\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *  }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `aria-label` attribute on each backreference\n *   (the `‚Ü©` links).\n *   It affects users of assistive technology.\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\nexport function gfmFootnoteHtml(options) {\n  const config = options || emptyOptions\n  const label = config.label || 'Footnotes'\n  const labelTagName = config.labelTagName || 'h2'\n  const labelAttributes =\n    config.labelAttributes === null || config.labelAttributes === undefined\n      ? 'class=\"sr-only\"'\n      : config.labelAttributes\n  const backLabel = config.backLabel || defaultBackLabel\n  const clobberPrefix =\n    config.clobberPrefix === null || config.clobberPrefix === undefined\n      ? 'user-content-'\n      : config.clobberPrefix\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = /** @type {Array<boolean>} */ this.getData('tightStack')\n        stack.push(false)\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer()\n      },\n      gfmFootnoteCallString() {\n        this.buffer()\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions')\n        const footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n        const tightStack =\n          /** @type {Array<boolean>} */\n          this.getData('tightStack')\n        const current = footnoteStack.pop()\n        const value = this.resume()\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\n        }\n        if (!own.call(definitions, current)) definitions[current] = value\n        tightStack.pop()\n        this.setData('slurpOneLineEnding', true)\n        // ‚ÄúHack‚Äù to prevent a line ending from showing up if we‚Äôre in a definition in\n        // an empty list item.\n        this.setData('lastWasTag')\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\n        this.resume() // Drop the label.\n        this.buffer() // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls =\n          /** @type {Array<string>|undefined} */\n          this.getData('gfmFootnoteCallOrder')\n        let counts =\n          /** @type {Record<string, number>|undefined} */\n          this.getData('gfmFootnoteCallCounts')\n        const id = normalizeIdentifier(this.sliceSerialize(token))\n        /** @type {number} */\n        let counter\n        this.resume()\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\n        const index = calls.indexOf(id)\n        const safeId = sanitizeUri(id.toLowerCase())\n        if (index === -1) {\n          calls.push(id)\n          counts[id] = 1\n          counter = calls.length\n        } else {\n          counts[id]++\n          counter = index + 1\n        }\n        const reuseCounter = counts[id]\n        this.tag(\n          '<sup><a href=\"#' +\n            clobberPrefix +\n            'fn-' +\n            safeId +\n            '\" id=\"' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\n            String(counter) +\n            '</a></sup>'\n        )\n      },\n      null() {\n        const calls =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteCallOrder') || []\n        const counts =\n          /** @type {Record<string, number>} */\n          this.getData('gfmFootnoteCallCounts') || {}\n        const definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions') || {}\n        let index = -1\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag(\n            '<section data-footnotes=\"\" class=\"footnotes\"><' +\n              labelTagName +\n              ' id=\"footnote-label\"' +\n              (labelAttributes ? ' ' + labelAttributes : '') +\n              '>'\n          )\n          this.raw(this.encode(label))\n          this.tag('</' + labelTagName + '>')\n          this.lineEndingIfNeeded()\n          this.tag('<ol>')\n        }\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index]\n          const safeId = sanitizeUri(id.toLowerCase())\n          let referenceIndex = 0\n          /** @type {Array<string>} */\n          const references = []\n          while (++referenceIndex <= counts[id]) {\n            references.push(\n              '<a href=\"#' +\n                clobberPrefix +\n                'fnref-' +\n                safeId +\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\n                '\" data-footnote-backref=\"\" aria-label=\"' +\n                this.encode(\n                  typeof backLabel === 'string'\n                    ? backLabel\n                    : backLabel(index, referenceIndex)\n                ) +\n                '\" class=\"data-footnote-backref\">‚Ü©' +\n                (referenceIndex > 1\n                  ? '<sup>' + referenceIndex + '</sup>'\n                  : '') +\n                '</a>'\n            )\n          }\n          const reference = references.join(' ')\n          let injected = false\n          this.lineEndingIfNeeded()\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\n          this.lineEndingIfNeeded()\n          this.tag(\n            definitions[id].replace(\n              /<\\/p>(?:\\r?\\n|\\r)?$/,\n              (/** @type {string} */ $0) => {\n                injected = true\n                return ' ' + reference + $0\n              }\n            )\n          )\n          if (!injected) {\n            this.lineEndingIfNeeded()\n            this.tag(reference)\n          }\n          this.lineEndingIfNeeded()\n          this.tag('</li>')\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag('</ol>')\n          this.lineEndingIfNeeded()\n          this.tag('</section>')\n        }\n      }\n    }\n  }\n}\n"],"mappingsmBAAmB,QAAO,qCAAqC;AACvE,SAAQC,WAAW,QAAO,6BAA6B;AACvD,IAAMC,GAAG,GAAG,CAAC,CAAC,CAACC,cAAc;;AAE7B;AACA,IAAMC,YAAY,GAAG,CAAC,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,cAAc,EAAEC,gBAAgB,EAAE;EACjE,OACE,oBAAoB,IACnBD,cAAc,GAAG,CAAC,CAAC,IACnBC,gBAAgB,GAAG,CAAC,GAAG,GAAG,GAAGA,gBAAgB,GAAG,EAAE,CAAC;AAExD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAE;EACvC,IAAMC,MAAM,GAAGD,OAAO,IAAIL,YAAY;EACtC,IAAMO,KAAK,GAAGD,MAAM,CAACC,KAAK,IAAI,WAAW;EACzC,IAAMC,YAAY,GAAGF,MAAM,CAACE,YAAY,IAAI,IAAI;EAChD,IAAMC,eAAe,GACnBH,MAAM,CAACG,eAAe,KAAK,IAAI,IAAIH,MAAM,CAACG,eAAe,KAAKC,SAAS,GACnE,iBAAiB,GACjBJ,MAAM,CAACG,eAAe;EAC5B,IAAME,SAAS,GAAGL,MAAM,CAACK,SAAS,IAAIV,gBAAgB;EACtD,IAAMW,aAAa,GACjBN,MAAM,CAACM,aAAa,KAAK,IAAI,IAAIN,MAAM,CAACM,aAAa,KAAKF,SAAS,GAC/D,eAAe,GACfJ,MAAM,CAACM,aAAa;EAC1B,OAAO;IACLC,KAAK,EAAE;MACLC,qBAAqB,WAAAA,sBAAA,EAAG;QACtB,IAAMC,KAAK,GAAG,6BAA8B,IAAI,CAACC,OAAO,CAAC,YAAY,CAAC;QACtED,KAAK,CAACE,IAAI,CAAC,KAAK,CAAC;MACnB,CAAC;MACDC,gCAAgC,WAAAA,iCAAA,EAAG;QACjC,IAAI,CAACC,MAAM,CAAC,CAAC;MACf,CAAC;MACDC,qBAAqB,WAAAA,sBAAA,EAAG;QACtB,IAAI,CAACD,MAAM,CAAC,CAAC;MACf;IACF,CAAC;IACDE,IAAI,EAAE;MACJP,qBAAqB,WAAAA,sBAAA,EAAG;QACtB,IAAIQ,WAAW,GACb;QACA,IAAI,CAACN,OAAO,CAAC,wBAAwB,CAAC;QACxC,IAAMO,aAAa,GACjB;QACA,IAAI,CAACP,OAAO,CAAC,4BAA4B,CAAC;QAC5C,IAAMQ,UAAU,GACd;QACA,IAAI,CAACR,OAAO,CAAC,YAAY,CAAC;QAC5B,IAAMS,OAAO,GAAGF,aAAa,CAACG,GAAG,CAAC,CAAC;QACnC,IAAMC,KAAK,GAAG,IAAI,CAACC,MAAM,CAAC,CAAC;QAC3B,IAAI,CAACN,WAAW,EAAE;UAChB,IAAI,CAACO,OAAO,CAAC,wBAAwB,EAAGP,WAAW,GAAG,CAAC,CAAE,CAAC;QAC5D;QACA,IAAI,CAACxB,GAAG,CAACgC,IAAI,CAACR,WAAW,EAAEG,OAAO,CAAC,EAAEH,WAAW,CAACG,OAAO,CAAC,GAAGE,KAAK;QACjEH,UAAU,CAACE,GAAG,CAAC,CAAC;QAChB,IAAI,CAACG,OAAO,CAAC,oBAAoB,EAAE,IAAI,CAAC;QACxC;QACA;QACA,IAAI,CAACA,OAAO,CAAC,YAAY,CAAC;MAC5B,CAAC;MACDX,gCAAgC,WAAAA,iCAACa,KAAK,EAAE;QACtC,IAAIR,aAAa,GACf;QACA,IAAI,CAACP,OAAO,CAAC,4BAA4B,CAAC;QAC5C,IAAI,CAACO,aAAa,EAAE;UAClB,IAAI,CAACM,OAAO,CAAC,4BAA4B,EAAGN,aAAa,GAAG,EAAG,CAAC;QAClE;QACAA,aAAa,CAACN,IAAI,CAACrB,mBAAmB,CAAC,IAAI,CAACoC,cAAc,CAACD,KAAK,CAAC,CAAC,CAAC;QACnE,IAAI,CAACH,MAAM,CAAC,CAAC,EAAC;QACd,IAAI,CAACT,MAAM,CAAC,CAAC,EAAC;MAChB,CAAC;MAEDC,qBAAqB,WAAAA,sBAACW,KAAK,EAAE;QAC3B,IAAIE,KAAK,GACP;QACA,IAAI,CAACjB,OAAO,CAAC,sBAAsB,CAAC;QACtC,IAAIkB,MAAM,GACR;QACA,IAAI,CAAClB,OAAO,CAAC,uBAAuB,CAAC;QACvC,IAAMmB,EAAE,GAAGvC,mBAAmB,CAAC,IAAI,CAACoC,cAAc,CAACD,KAAK,CAAC,CAAC;QAC1D;QACA,IAAIK,OAAO;QACX,IAAI,CAACR,MAAM,CAAC,CAAC;QACb,IAAI,CAACK,KAAK,EAAE,IAAI,CAACJ,OAAO,CAAC,sBAAsB,EAAGI,KAAK,GAAG,EAAG,CAAC;QAC9D,IAAI,CAACC,MAAM,EAAE,IAAI,CAACL,OAAO,CAAC,uBAAuB,EAAGK,MAAM,GAAG,CAAC,CAAE,CAAC;QACjE,IAAMG,KAAK,GAAGJ,KAAK,CAACK,OAAO,CAACH,EAAE,CAAC;QAC/B,IAAMI,MAAM,GAAG1C,WAAW,CAACsC,EAAE,CAACK,WAAW,CAAC,CAAC,CAAC;QAC5C,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;UAChBJ,KAAK,CAAChB,IAAI,CAACkB,EAAE,CAAC;UACdD,MAAM,CAACC,EAAE,CAAC,GAAG,CAAC;UACdC,OAAO,GAAGH,KAAK,CAACQ,MAAM;QACxB,CAAC,MAAM;UACLP,MAAM,CAACC,EAAE,CAAC,EAAE;UACZC,OAAO,GAAGC,KAAK,GAAG,CAAC;QACrB;QACA,IAAMK,YAAY,GAAGR,MAAM,CAACC,EAAE,CAAC;QAC/B,IAAI,CAACQ,GAAG,CACN,iBAAiB,GACf/B,aAAa,GACb,KAAK,GACL2B,MAAM,GACN,QAAQ,GACR3B,aAAa,GACb,QAAQ,GACR2B,MAAM,IACLG,YAAY,GAAG,CAAC,GAAG,GAAG,GAAGA,YAAY,GAAG,EAAE,CAAC,GAC5C,2DAA2D,GAC3DE,MAAM,CAACR,OAAO,CAAC,GACf,YACJ,CAAC;MACH,CAAC;MACDS,IAAI,WAAAC,MAAA,EAAG;QAAA,IAAAC,KAAA;QACL,IAAMd,KAAK,GACT;QACA,IAAI,CAACjB,OAAO,CAAC,sBAAsB,CAAC,IAAI,EAAE;QAC5C,IAAMkB,MAAM,GACV;QACA,IAAI,CAAClB,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAMM,WAAW,GACf;QACA,IAAI,CAACN,OAAO,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAIqB,KAAK,GAAG,CAAC,CAAC;QACd,IAAIJ,KAAK,CAACQ,MAAM,GAAG,CAAC,EAAE;UACpB,IAAI,CAACO,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACL,GAAG,CACN,gDAAgD,GAC9CnC,YAAY,GACZ,sBAAsB,IACrBC,eAAe,GAAG,GAAG,GAAGA,eAAe,GAAG,EAAE,CAAC,GAC9C,GACJ,CAAC;UACD,IAAI,CAACwC,GAAG,CAAC,IAAI,CAACC,MAAM,CAAC3C,KAAK,CAAC,CAAC;UAC5B,IAAI,CAACoC,GAAG,CAAC,IAAI,GAAGnC,YAAY,GAAG,GAAG,CAAC;UACnC,IAAI,CAACwC,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACL,GAAG,CAAC,MAAM,CAAC;QAClB;QAAC,IAAAQ,KAAA,YAAAA,MAAA,EAC8B;UAC7B;UACA,IAAMhB,EAAE,GAAGF,KAAK,CAACI,KAAK,CAAC;UACvB,IAAME,MAAM,GAAG1C,WAAW,CAACsC,EAAE,CAACK,WAAW,CAAC,CAAC,CAAC;UAC5C,IAAItC,cAAc,GAAG,CAAC;UACtB;UACA,IAAMkD,UAAU,GAAG,EAAE;UACrB,OAAO,EAAElD,cAAc,IAAIgC,MAAM,CAACC,EAAE,CAAC,EAAE;YACrCiB,UAAU,CAACnC,IAAI,CACb,YAAY,GACVL,aAAa,GACb,QAAQ,GACR2B,MAAM,IACLrC,cAAc,GAAG,CAAC,GAAG,GAAG,GAAGA,cAAc,GAAG,EAAE,CAAC,GAChD,yCAAyC,GACzC6C,KAAI,CAACG,MAAM,CACT,OAAOvC,SAAS,KAAK,QAAQ,GACzBA,SAAS,GACTA,SAAS,CAAC0B,KAAK,EAAEnC,cAAc,CACrC,CAAC,GACD,mCAAmC,IAClCA,cAAc,GAAG,CAAC,GACf,OAAO,GAAGA,cAAc,GAAG,QAAQ,GACnC,EAAE,CAAC,GACP,MACJ,CAAC;UACH;UACA,IAAMmD,SAAS,GAAGD,UAAU,CAACE,IAAI,CAAC,GAAG,CAAC;UACtC,IAAIC,QAAQ,GAAG,KAAK;UACpBR,KAAI,CAACC,kBAAkB,CAAC,CAAC;UACzBD,KAAI,CAACJ,GAAG,CAAC,UAAU,GAAG/B,aAAa,GAAG,KAAK,GAAG2B,MAAM,GAAG,IAAI,CAAC;UAC5DQ,KAAI,CAACC,kBAAkB,CAAC,CAAC;UACzBD,KAAI,CAACJ,GAAG,CACNrB,WAAW,CAACa,EAAE,CAAC,CAACqB,OAAO,CACrB,qBAAqB,EACrB,WAAC,qBAAsBC,EAAE,EAAK;YAC5BF,QAAQ,GAAG,IAAI;YACf,OAAO,GAAG,GAAGF,SAAS,GAAGI,EAAE;UAC7B,CACF,CACF,CAAC;UACD,IAAI,CAACF,QAAQ,EAAE;YACbR,KAAI,CAACC,kBAAkB,CAAC,CAAC;YACzBD,KAAI,CAACJ,GAAG,CAACU,SAAS,CAAC;UACrB;UACAN,KAAI,CAACC,kBAAkB,CAAC,CAAC;UACzBD,KAAI,CAACJ,GAAG,CAAC,OAAO,CAAC;QACnB,CAAC;QA/CD,OAAO,EAAEN,KAAK,GAAGJ,KAAK,CAACQ,MAAM;UAAAU,KAAA;QAAA;QAgD7B,IAAIlB,KAAK,CAACQ,MAAM,GAAG,CAAC,EAAE;UACpB,IAAI,CAACO,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACL,GAAG,CAAC,OAAO,CAAC;UACjB,IAAI,CAACK,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACL,GAAG,CAAC,YAAY,CAAC;QACxB;MACF;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}