{"ast":null,"code":"import _defineProperty from \"/Users/jamesmacquillan/Documents/chatbot-im-1o/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nvar indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  var _text;\n  /** @type {Extension} */\n  return {\n    document: _defineProperty({}, 91, {\n      tokenize: tokenizeDefinitionStart,\n      continuation: {\n        tokenize: tokenizeDefinitionContinuation\n      },\n      exit: gfmFootnoteDefinitionEnd\n    }),\n    text: (_text = {}, _defineProperty(_text, 91, {\n      tokenize: tokenizeGfmFootnoteCall\n    }), _defineProperty(_text, 93, {\n      add: 'after',\n      tokenize: tokenizePotentialGfmFootnoteCall,\n      resolveTo: resolveToPotentialGfmFootnoteCall\n    }), _text)\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  var self = this;\n  var index = self.events.length;\n  /** @type {Array<string>} */\n  // @ts-expect-error Itâ€™s fine!\n  var defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  var labelStart;\n\n  // Find an opening.\n  while (index--) {\n    var token = self.events[index][1];\n    if (token.type === 'labelImage') {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if weâ€™ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === 'labelLink' || token.type === 'label' || token.type === 'image' || token.type === 'link') {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    var id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  var index = events.length;\n  /** @type {Token | undefined} */\n  var labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === 'labelImage' && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data';\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  var call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  var marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  var string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  var chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  var replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice.apply(events, [index, events.length - index + 1].concat(replacement));\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  var self = this;\n  /** @type {Array<string>} */\n  // @ts-expect-error Itâ€™s fine!\n  var defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  var size = 0;\n  /** @type {boolean} */\n  var data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We canâ€™t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      var token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  var self = this;\n  /** @type {Array<string>} */\n  // @ts-expect-error Itâ€™s fine!\n  var defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  var identifier;\n  var size = 0;\n  /** @type {boolean | undefined} */\n  var data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > ðŸ‘‰ **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      var token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > ðŸ‘‰ **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  var self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    var tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"names":["blankLine","factorySpace","markdownLineEndingOrSpace","normalizeIdentifier","indent","tokenize","tokenizeIndent","partial","gfmFootnote","_text","document","_defineProperty","tokenizeDefinitionStart","continuation","tokenizeDefinitionContinuation","exit","gfmFootnoteDefinitionEnd","text","tokenizeGfmFootnoteCall","add","tokenizePotentialGfmFootnoteCall","resolveTo","resolveToPotentialGfmFootnoteCall","effects","ok","nok","self","index","events","length","defined","parser","gfmFootnotes","labelStart","token","type","start","code","_balanced","id","sliceSerialize","end","now","codePointAt","includes","slice","enter","consume","context","call","Object","assign","marker","column","offset","_bufferIndex","string","chunk","contentType","replacement","splice","apply","concat","size","data","callStart","callData","callEscape","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","push","whitespaceAfter","check","attempt","afterPrefix","tail"],"sources":["/Users/jamesmacquillan/Documents/chatbot-im-1o/node_modules/micromark-extension-gfm-footnote/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error Itâ€™s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if weâ€™ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error Itâ€™s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We canâ€™t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error Itâ€™s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > ðŸ‘‰ **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > ðŸ‘‰ **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}