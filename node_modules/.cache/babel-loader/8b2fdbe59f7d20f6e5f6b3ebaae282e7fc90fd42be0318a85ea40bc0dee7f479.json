{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\n\n/**\n * A custom hook for managing state that is persisted in the local storage.\n *\n * @param {string} key - The key in the local storage where the state should be stored.\n * @param {any} initialValue - The initial value of the state.\n *\n * @returns {Array} An array containing the current value of the state\n * and a function to update it.\n */\nconst useLocalStorage = (key, initialValue) => {\n  _s();\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const removeValue = value => {\n    window.localStorage.removeItem(value);\n  };\n  return [storedValue, setValue, removeValue];\n};\n_s(useLocalStorage, \"85bDLJOdffvDdfQv6PuN5Q0aulA=\");\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify","removeValue","removeItem"],"sources":["/Users/jamesmacquillan/Downloads/chatbot-im-1o copy/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState } from 'react';\n\n/**\n * A custom hook for managing state that is persisted in the local storage.\n *\n * @param {string} key - The key in the local storage where the state should be stored.\n * @param {any} initialValue - The initial value of the state.\n *\n * @returns {Array} An array containing the current value of the state\n * and a function to update it.\n */\nconst useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n\n      setStoredValue(valueToStore);\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const removeValue = (value) => {\n    window.localStorage.removeItem(value);\n  };\n  return [storedValue, setValue, removeValue];\n};\n\nexport default useLocalStorage;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,YAAY,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF,MAAMO,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;MAC7C,OAAOK,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGJ,YAAY;IAC/C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAOV,YAAY;IACrB;EACF,CAAC,CAAC;EAEF,MAAMa,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAI;MACF,MAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACZ,WAAW,CAAC,GAAGY,KAAK;MAExDX,cAAc,CAACY,YAAY,CAAC;MAE5BV,MAAM,CAACC,YAAY,CAACW,OAAO,CAAClB,GAAG,EAAES,IAAI,CAACU,SAAS,CAACH,YAAY,CAAC,CAAC;IAChE,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAMS,WAAW,GAAIL,KAAK,IAAK;IAC7BT,MAAM,CAACC,YAAY,CAACc,UAAU,CAACN,KAAK,CAAC;EACvC,CAAC;EACD,OAAO,CAACZ,WAAW,EAAEW,QAAQ,EAAEM,WAAW,CAAC;AAC7C,CAAC;AAAClB,EAAA,CA5BIH,eAAe;AA8BrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}